{
    "sourceFile": "src/WordleProject/Components/renderGamePage.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1700081225587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1700081307326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React from 'react';\n-\n+import GameContainer from './gameContainer';\n const RenderGamePage = ({\n     userInput,\n     feedback,\n     attempts,\n"
                },
                {
                    "date": 1700081313014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React from 'react';\n-import GameContainer from './gameContainer';\n+\n const RenderGamePage = ({\n     userInput,\n     feedback,\n     attempts,\n"
                },
                {
                    "date": 1700081533384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+/* eslint-disable react/prop-types */\n import React from 'react';\n \n const RenderGamePage = ({\n     userInput,\n"
                },
                {
                    "date": 1700081654460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n                     {errorMessage}\n                 </div>\n             )}\n \n-            {attempts >= attemptLimit && (\n+            {attempts >= (attempts + remainingAttempts) && (\n                 <div>\n                     <p>\n                         Game Over! The correct answer was: <strong>{selectedWord}</strong>\n                     </p>\n"
                },
                {
                    "date": 1700081683972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n /* eslint-disable react/prop-types */\n import React from 'react';\n+import './game.css';\n \n const RenderGamePage = ({\n     userInput,\n     feedback,\n"
                },
                {
                    "date": 1700101559681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n /* eslint-disable react/prop-types */\n import React from 'react';\n import './game.css';\n+import { UserProvider, useUserContext } from '../../Login/useContext';\n \n const RenderGamePage = ({\n     userInput,\n     feedback,\n"
                },
                {
                    "date": 1700101588933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n /* eslint-disable react/prop-types */\n import React from 'react';\n import './game.css';\n import { UserProvider, useUserContext } from '../../Login/useContext';\n-\n+const { username, score } = useUserContext();\n const RenderGamePage = ({\n     userInput,\n     feedback,\n     attempts,\n@@ -15,8 +15,9 @@\n     remainingAttempts,\n     selectedWord,\n }) => {\n     return (\n+        const { username, score } = useUserContext();\n         <div className=\"center-container\">\n             <p>Remaining attempts: {remainingAttempts}</p>\n             <div className=\"word-input\">\n                 {userInput.map((value, index) => (\n"
                },
                {
                    "date": 1700101605243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,67 +13,68 @@\n     onSubmitWord,\n     onResetGame,\n     remainingAttempts,\n     selectedWord,\n-}) => {\n+}\n+const { username, score } = useUserContext();) => {\n     return (\n-        const { username, score } = useUserContext();\n-    <div className=\"center-container\">\n-        <p>Remaining attempts: {remainingAttempts}</p>\n-        <div className=\"word-input\">\n-            {userInput.map((value, index) => (\n-                <div key={index}>\n-                    <input\n-                        type=\"text\"\n-                        maxLength=\"1\"\n-                        value={value}\n-                        className={`input-block ${feedback[index]}`}\n-                        onChange={(e) => onInputChange(index, e.target.value)}\n-                    />\n+\n+        <div className=\"center-container\">\n+            <p>Remaining attempts: {remainingAttempts}</p>\n+            <div className=\"word-input\">\n+                {userInput.map((value, index) => (\n+                    <div key={index}>\n+                        <input\n+                            type=\"text\"\n+                            maxLength=\"1\"\n+                            value={value}\n+                            className={`input-block ${feedback[index]}`}\n+                            onChange={(e) => onInputChange(index, e.target.value)}\n+                        />\n+                    </div>\n+                ))}\n+            </div>\n+\n+            <div className=\"button-container\">\n+                {showCongratulations ? (\n+                    <div>\n+                        <span role=\"img\" aria-label=\"celebration\" style={{ color: 'red' }}>\n+                            ðŸŽ‰\n+                        </span>\n+                        <p>Congratulations! Would you like to try again?</p>\n+                        <button className=\"navigation-button\" onClick={onResetGame}>\n+                            Try Again\n+                        </button>\n+                    </div>\n+                ) : (\n+                    <>\n+                        <button className=\"navigation-button\" onClick={onSubmitWord}>\n+                            Submit\n+                        </button>\n+                        <button className=\"navigation-button\" onClick={onResetGame}>\n+                            Reset\n+                        </button>\n+                    </>\n+                )}\n+            </div>\n+            {/* Display the error message */}\n+            {errorMessage && (\n+                <div style={{ color: 'red', marginBottom: '20px' }}>\n+                    {errorMessage}\n                 </div>\n-            ))}\n-        </div>\n+            )}\n \n-        <div className=\"button-container\">\n-            {showCongratulations ? (\n+            {attempts >= (attempts + remainingAttempts) && (\n                 <div>\n-                    <span role=\"img\" aria-label=\"celebration\" style={{ color: 'red' }}>\n-                        ðŸŽ‰\n-                    </span>\n-                    <p>Congratulations! Would you like to try again?</p>\n+                    <p>\n+                        Game Over! The correct answer was: <strong>{selectedWord}</strong>\n+                    </p>\n                     <button className=\"navigation-button\" onClick={onResetGame}>\n                         Try Again\n                     </button>\n                 </div>\n-            ) : (\n-                <>\n-                    <button className=\"navigation-button\" onClick={onSubmitWord}>\n-                        Submit\n-                    </button>\n-                    <button className=\"navigation-button\" onClick={onResetGame}>\n-                        Reset\n-                    </button>\n-                </>\n             )}\n         </div>\n-        {/* Display the error message */}\n-        {errorMessage && (\n-            <div style={{ color: 'red', marginBottom: '20px' }}>\n-                {errorMessage}\n-            </div>\n-        )}\n-\n-        {attempts >= (attempts + remainingAttempts) && (\n-            <div>\n-                <p>\n-                    Game Over! The correct answer was: <strong>{selectedWord}</strong>\n-                </p>\n-                <button className=\"navigation-button\" onClick={onResetGame}>\n-                    Try Again\n-                </button>\n-            </div>\n-        )}\n-    </div>\n     );\n };\n \n export default RenderGamePage;\n"
                },
                {
                    "date": 1700101611894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,9 @@\n     onSubmitWord,\n     onResetGame,\n     remainingAttempts,\n     selectedWord,\n-}\n-const { username, score } = useUserContext();) => {\n+}) => {\n     return (\n \n         <div className=\"center-container\">\n             <p>Remaining attempts: {remainingAttempts}</p>\n"
                }
            ],
            "date": 1700081225587,
            "name": "Commit-0",
            "content": "import React from 'react';\n\nconst RenderGamePage = ({\n    userInput,\n    feedback,\n    attempts,\n    showCongratulations,\n    errorMessage,\n    onInputChange,\n    onSubmitWord,\n    onResetGame,\n    remainingAttempts,\n    selectedWord,\n}) => {\n    return (\n        <div className=\"center-container\">\n            <p>Remaining attempts: {remainingAttempts}</p>\n            <div className=\"word-input\">\n                {userInput.map((value, index) => (\n                    <div key={index}>\n                        <input\n                            type=\"text\"\n                            maxLength=\"1\"\n                            value={value}\n                            className={`input-block ${feedback[index]}`}\n                            onChange={(e) => onInputChange(index, e.target.value)}\n                        />\n                    </div>\n                ))}\n            </div>\n\n            <div className=\"button-container\">\n                {showCongratulations ? (\n                    <div>\n                        <span role=\"img\" aria-label=\"celebration\" style={{ color: 'red' }}>\n                            ðŸŽ‰\n                        </span>\n                        <p>Congratulations! Would you like to try again?</p>\n                        <button className=\"navigation-button\" onClick={onResetGame}>\n                            Try Again\n                        </button>\n                    </div>\n                ) : (\n                    <>\n                        <button className=\"navigation-button\" onClick={onSubmitWord}>\n                            Submit\n                        </button>\n                        <button className=\"navigation-button\" onClick={onResetGame}>\n                            Reset\n                        </button>\n                    </>\n                )}\n            </div>\n            {/* Display the error message */}\n            {errorMessage && (\n                <div style={{ color: 'red', marginBottom: '20px' }}>\n                    {errorMessage}\n                </div>\n            )}\n\n            {attempts >= attemptLimit && (\n                <div>\n                    <p>\n                        Game Over! The correct answer was: <strong>{selectedWord}</strong>\n                    </p>\n                    <button className=\"navigation-button\" onClick={onResetGame}>\n                        Try Again\n                    </button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default RenderGamePage;\n"
        }
    ]
}